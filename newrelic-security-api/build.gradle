import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.nr.builder.DependencyPatcher
import com.nr.builder.GitUtil
import com.nr.builder.Log4j2PluginFileMover
import com.nr.builder.publish.PublishConfig

plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
}
java.sourceCompatibility = JavaVersion.VERSION_1_8

configurations {
    shadowIntoJar
    jarIntoJar
    finalArtifact
    publishToMavenLocal
}

configurations.implementation.extendsFrom(configurations.shadowIntoJar)
configurations.implementation.extendsFrom(configurations.jarIntoJar)

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
//    shadowIntoJar project(":newrelic-security-data-schema")
}


/**
 * The `relocatedShadowJar` task builds the initial shaded jar. It performs the following tasks:
 *   - Identifies all dependencies in the "shadowIntoJar" configuration
 *     This should include all third-party (not Java, not New Relic) dependencies
 *     This should also gather their dependencies (i.e., transitive dependencies)
 *   - Relocates any non-com.newrelic packages to com.newrelic.agent.security.deps
 *   - Rewrites all class files to honor the relocated classes
 *   - Transforms the Log4j2Plugins cache for the relocated classes
 * The output of this task should contain:
 *   - The classes from the newrelic-agent package
 *   - The contents of newrelic-agent/src/main/resources
 *   - The relocated classes from the third-party dependencies
 *   - The newly-created Agent.properties from generateVersionProperties
 */
task relocatedShadowJar(type: ShadowJar) {
    dependsOn("classes", "processResources")
    from sourceSets.main.output.classesDirs
    from(sourceSets.main.output.resourcesDir) {
        exclude("*.jar", "*.java")
    }

    setConfigurations([project.configurations.shadowIntoJar])

    // For any given shadow task, `exclude` may be called exactly once.
    // Repeated calls replace earlier calls.
    exclude(
            // these are files that come along with protobuf; we don't
            // need them at runtime.
            "**/*.proto",
            // These are unnecessary files from our dependencies.
            "META-INF/maven/**",
            // Multiple dependencies
            "LICENSE",
            "LICENSE.txt",
            // log4j2
            "META-INF/versions/9/module-info.class",
            "META-INF/services/org.apache.logging*",
            // asm
            "module-info.class",
            // httpclient
            "META-INF/DEPENDENCIES",
            "META-INF/LICENSE",
            "META-INF/NOTICE",
            // Commons CLI
            "META-INF/LICENSE.txt",
            "META-INF/NOTICE.txt",
            // gRPC
            "META-INF/services/javax.annotation.*"
    )

    mergeServiceFiles()

    archiveBaseName.set("relocatedShadowJar")
}


/**
 * <p>The `transformedShadowJar` task creates an intermediate shaded jar. The purpose of this
 * task is to apply class transformations to our dependencies. These class transformations
 * are under {@link com.nr.builder.DependencyPatcher}, and include:</p>
 * <ol>
 *     <li>Altering calls to java.util.logging (within shaded Guava) to get the global logger</li>
 *     <li>Altering references to Log4j2Plugins.dat to a different file name</li>
 * </ol>
 * <p>The rationale for two shadow jar tasks is a limitation within shadowJar.
 * Any relocations prevent transformers from running on class files. Without relocations,
 * transformers will run on class files. Therefore, we have one step that relocates
 * and a second step that transforms.
 */
task transformedShadowJar(type: ShadowJar) {
    dependsOn 'relocatedShadowJar'
    from(zipTree(project.tasks['relocatedShadowJar'].archiveFile.get().asFile.path))

    // shadow will only apply the first transform that claims to transform a file,
    // so the set of files they could possibly apply to _must_ be disjoint.
    // DependencyPatcher applies only to class files.
    transform(DependencyPatcher)
    // Log4j2PluginFileMover applies only to the Log4j2Plugins.dat resource file.
    transform(Log4j2PluginFileMover)

    archiveBaseName.set("transformedShadowJar")
}

/**
 * The newrelicVersionedAPIJar task builds the final output jar. This jar contains:
 * <ul>
 *     <li>All the files from the transformedShadowJar task</li>
 *     <li>The jars from the other projects that get added to other classloaders, like agent-bridge
 *      (from the jarIntoJar configuration)</li>
 *     <li>LICENSE from updateLicenseFile</li>
 * </ul>
 */
task newrelicVersionedAPIJar(type: Jar) {
    group("build")
    dependsOn("transformedShadowJar")

    from("$rootDir/LICENSE.md")

    includeEmptyDirs = false

    // This captures jars that are added to the bootstrap classpath.
    // All projects have the same version, so we can safely remove this version from the name.
    from(project.configurations.jarIntoJar) {
        rename("-${project.version}", "")
    }

    from(zipTree(project.tasks['transformedShadowJar'].archiveFile.get().asFile.path))

    manifest {
        attributes 'Implementation-Title': 'New Relic Security Agent API',
                'Implementation-Version': project.version,
                'Created-By': 'New Relic, Inc',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': project.version.toString().contains("DEV") ? "DEV" : new Date(),
                'Specification-Version': project.version,
                'Build-Id': System.getProperty('BUILD_ID') ?: "None",
                'Multi-Release': true,
                'X-Git-SHA': System.getenv("GITHUB_SHA") ?: GitUtil.sha(project) ?: "UNKNOWN"
    }
}

tasks.withType(GenerateModuleMetadata.class) {
    enabled = false
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    options.addBooleanOption("-frames", true)
    options.addBooleanOption("-no-module-directories", true)
}


PublishConfig.config(
        project,
        "New Relic Security Java agent API",
        "The public API of the Security Java agent, and no-op implementations for safe usage without the agent. To be used in newrelic-java-agent only.") { it ->
    it.artifact(tasks.newrelicVersionedAPIJar)
    it.artifact(tasks.sourcesJar)
    it.artifact(tasks.javadocJar)
}

// because of the complex shadowing requirements, the auto-generated `jar` task is not useful.
jar {
    enabled = false
}

artifacts {
    finalArtifact newrelicVersionedAPIJar
    archives newrelicVersionedAPIJar
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer
import com.nr.builder.DependencyPatcher
import com.nr.builder.GitUtil
import com.nr.builder.Log4j2PluginFileMover
import com.nr.builder.publish.PublishConfig
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.time.Clock

plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
}

java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    tests
    // This configuration is intended for dependencies that will be
    // compiled, extracted, and relocated.
    shadowIntoJar
    // This configuration is intended for dependencies whose jar files
    // will be compiled, but included in the final jar compressed
    jarIntoJar
    // This configuration has the final artifact.
    finalArtifact
}

configurations.implementation.extendsFrom(configurations.shadowIntoJar)
configurations.implementation.extendsFrom(configurations.jarIntoJar)

project.ext {
    instrumentProjects = {
        rootProject.subprojects.findAll { project -> project.path =~ /:instrumentation:/ }
    }
}

java {
    // by default, gradle will attempt to resolve only files
    // that are compiled with a corresponding source version.
    // However, module-util is compiled with Java 11 (because it
    // has to be >= 9) and that will not work with this.
    disableAutoTargetJvm()

    withSourcesJar()
    withJavadocJar()
}


dependencies {
    shadowIntoJar project(":newrelic-security-api")
    shadowIntoJar ('com.googlecode.json-simple:json-simple:1.1.1'){
        exclude(module:'junit', group:'junit')
    }
    shadowIntoJar 'com.fasterxml.jackson.core:jackson-databind:2.14.3'
    shadowIntoJar 'org.java-websocket:Java-WebSocket:1.5.3'
    shadowIntoJar 'commons-io:commons-io:2.14.0'
    shadowIntoJar 'org.apache.commons:commons-text:1.10.0'
    shadowIntoJar 'commons-net:commons-net:3.9.0'
    shadowIntoJar 'org.apache.commons:commons-compress:1.26.0'
    shadowIntoJar 'org.apache.commons:commons-collections4:4.4'
    shadowIntoJar 'org.unbescape:unbescape:1.1.6.RELEASE'
    shadowIntoJar 'commons-codec:commons-codec:1.15'
    shadowIntoJar 'org.slf4j:slf4j-simple:1.7.30'
    shadowIntoJar 'net.openhft:zero-allocation-hashing:0.16'
    shadowIntoJar 'com.github.oshi:oshi-core:6.4.1'
    shadowIntoJar 'com.google.code.gson:gson:2.10.1'
    shadowIntoJar 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation "com.newrelic.agent.java:newrelic-api:${nrAPIVersion}"
}

/**
 * The generateVersionProperties creates a properties file
 * containing the built version of the Jar.
 */
task generateVersionProperties(type: WriteProperties) {
    outputFile = new File(sourceSets.main.output.resourcesDir, "Agent.properties")
    property('collectorVersion', "$version")
    property('buildTime', Clock.systemUTC().instant().toString())
    property('commitId', "$commitId")
    property('jsonVersion', "$jsonVersion")
    property('buildNumber', "$buildNumber")
}
tasks.javadocJar.dependsOn(generateVersionProperties)
/**
 * The `relocatedShadowJar` task builds the initial shaded jar. It performs the following tasks:
 *   - Identifies all dependencies in the "shadowIntoJar" configuration
 *     This should include all third-party (not Java, not New Relic) dependencies
 *     This should also gather their dependencies (i.e., transitive dependencies)
 *   - Relocates any non-com.newrelic packages to com.newrelic.agent.security.deps
 *   - Rewrites all class files to honor the relocated classes
 *   - Transforms the Log4j2Plugins cache for the relocated classes
 * The output of this task should contain:
 *   - The classes from the newrelic-agent package
 *   - The contents of newrelic-agent/src/main/resources
 *   - The relocated classes from the third-party dependencies
 *   - The newly-created Agent.properties from generateVersionProperties
 */
task relocatedShadowJar(type: ShadowJar) {
    dependsOn("classes", "processResources", "generateVersionProperties", ":newrelic-security-api:newrelicVersionedAPIJar")

    from sourceSets.main.output.classesDirs
    from(sourceSets.main.output.resourcesDir) {
        exclude("*.jar", "*.java")
    }

    setConfigurations([project.configurations.shadowIntoJar])
    [
            "org.json", "com.fasterxml", "org.java_websocket", "com.google", "org.unbescape",
            "org.apache.commons", "okio", "okhttp3", "org.slf4j", "net.openhft", "oshi", "com.sun.jna",
            "kotlin", "com.damnhandy", "org.joda", "io.opentelemetry", "org.everit", "org.jetbrains", "org.intellij",
            "org.junit", "org.hamcrest", "org.yaml", "junit", "org.apache.http"
    ].each {
        relocate(it, "com.newrelic.agent.security.deps.$it")
    }

    // This has to happen here because it uses the class relocation rules to accomplish its task
    transform(Log4j2PluginsCacheFileTransformer)

    // For any given shadow task, `exclude` may be called exactly once.
    // Repeated calls replace earlier calls.
    exclude(
            // these are files that come along with protobuf; we don't
            // need them at runtime.
            "**/*.proto",
            // These are unnecessary files from our dependencies.
            "META-INF/maven/**",
            // Multiple dependencies
            "LICENSE",
            "LICENSE.txt",
            // log4j2
            "META-INF/versions/9/module-info.class",
            "META-INF/services/org.apache.logging*",
            // asm
            "module-info.class",
            // httpclient
            "META-INF/DEPENDENCIES",
            "META-INF/LICENSE",
            "META-INF/NOTICE",
            // Commons CLI
            "META-INF/LICENSE.txt",
            "META-INF/NOTICE.txt",
            // gRPC
            "META-INF/services/javax.annotation.*"
    )

    mergeServiceFiles()

    archiveBaseName.set("relocatedShadowJar")
}

/**
 * <p>The `transformedShadowJar` task creates an intermediate shaded jar. The purpose of this
 * task is to apply class transformations to our dependencies. These class transformations
 * are under {@link com.nr.builder.DependencyPatcher}, and include:</p>
 * <ol>
 *     <li>Altering calls to java.util.logging (within shaded Guava) to get the global logger</li>
 *     <li>Altering references to Log4j2Plugins.dat to a different file name</li>
 * </ol>
 * <p>The rationale for two shadow jar tasks is a limitation within shadowJar.
 * Any relocations prevent transformers from running on class files. Without relocations,
 * transformers will run on class files. Therefore, we have one step that relocates
 * and a second step that transforms.
 */
task transformedShadowJar(type: ShadowJar) {
    dependsOn 'relocatedShadowJar'
    from(zipTree(project.tasks['relocatedShadowJar'].archiveFile.get().asFile.path))

    // shadow will only apply the first transform that claims to transform a file,
    // so the set of files they could possibly apply to _must_ be disjoint.
    // DependencyPatcher applies only to class files.
    transform(DependencyPatcher)
    // Log4j2PluginFileMover applies only to the Log4j2Plugins.dat resource file.
    transform(Log4j2PluginFileMover)

    archiveBaseName.set("transformedShadowJar")
}

/**
 * <p> The gradle task generate-sbom is responsible for generating an aggregate of all direct and transitive dependencies associated with the project.
 * It utilizes the GitHub REST API to produce SBOM in the standardized SPDX format.
 * For more information, please refer to <a href="https://docs.github.com/en/rest/dependency-graph/sboms"> this</a>.</p>
 * <ul>The output of this task should contain:
 * <li>The SBOM json file, which is located in newrelic-security-agent/reports/ directory.</li>
 * </ul>
*/
tasks.register('generate-sbom') {
    def url = new URL("https://api.github.com/repos/newrelic/csec-java-agent/dependency-graph/sbom")
    def req =  (HttpURLConnection) url.openConnection()
    req.addRequestProperty("Accept", "application/vnd.github+json")
    req.connect()
    req.getResponseCode()
    def parsedJson = new JsonSlurper().parseText(req.getInputStream().getText())

    def sbomFile = new File("$buildDir", "reports/SBOM.json")
    if ((sbomFile.exists() && sbomFile.delete() && sbomFile.createNewFile()) || sbomFile.createNewFile()) {
        sbomFile.write(new JsonBuilder(parsedJson).toPrettyString())
    }
}

/**
 * The newrelicVersionedAgentJar task builds the final output jar. This jar contains:
 * <ul>
 *     <li>All the files from the transformedShadowJar task</li>
 *     <li>All the instrumentation jars as jars (not expanded)</li>
 *     <li>The jars from the other projects that get added to other classloaders, like agent-bridge
 *      (from the jarIntoJar configuration)</li>
 *     <li>LICENSE from updateLicenseFile</li>
 * </ul>
 */
task newrelicVersionedAgentJar(type: Jar) {
    group("build")
    dependsOn("transformedShadowJar")
    dependsOn(instrumentProjects().collect { it.tasks["jar"] })
    dependsOn("generate-sbom")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from("$rootDir/LICENSE.md")
    from("$rootDir/THIRD_PARTY_NOTICES.md")
    from("$buildDir/reports/SBOM.json")

    includeEmptyDirs = false

    // This captures jars that are added to the bootstrap classpath.
    // All projects have the same version, so we can safely remove this version from the name.
    from(project.configurations.jarIntoJar) {
        rename("-${project.version}", "")
    }

    from(zipTree(project.tasks['transformedShadowJar'].archiveFile.get().asFile.path))

    into('instrumentation-security') {
        from {
            instrumentProjects().collect { it.tasks['jar'].archiveFile.get().asFile.path }
        }
    }

    manifest {
        attributes 'Implementation-Title': 'New Relic Security Java Agent',
                'Implementation-Version': project.version,
                'Created-By': 'New Relic, Inc',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': project.version.toString().contains("DEV") ? "DEV" : new Date(),
                'Specification-Version': project.version,
                'Build-Id': System.getProperty('BUILD_ID') ?: "None",
                'Multi-Release': true,
                'X-Git-SHA': System.getenv("GITHUB_SHA") ?: GitUtil.sha(project) ?: "UNKNOWN"
    }
}

PublishConfig.config(
        project,
        "New Relic Security Java Agent",
        "The New Relic Security Java agent module for full-stack security. To be used in newrelic-java-agent only.") { it ->
    it.artifact(tasks.newrelicVersionedAgentJar)
    it.artifact(tasks.sourcesJar)
    it.artifact(tasks.javadocJar)
}

// because of the complex shadowing requirements, the auto-generated `jar` task is not useful.
jar {
    enabled = false
}

artifacts {
    finalArtifact newrelicVersionedAgentJar
    archives newrelicVersionedAgentJar
}

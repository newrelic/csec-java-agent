name: X - Reusable Build Security Agent
on:
  workflow_call:
    inputs:
      apm-repo:
        description: 'The repo of APM source code to use'
        required: true
        type: string
        default: 'newrelic/newrelic-java-agent'
      apm-source-ref:
        description: 'The source-ref of APM source code to use'
        required: true
        type: string
        default: 'k2-integration'
      run-unit-test:
        description: 'Run instrumentation unit tests ?'
        required: true
        type: string
        default: 'true'
      is-release:
        description: 'Is this a release run'
        required: true
        type: string
        default: 'false'
      version-suffix:
        description: 'version suffix to be added, if any'
        default: ''
        type: string

  workflow_dispatch:
    inputs:
      apm-repo:
        description: 'The repo of APM source code to use'
        required: true
        type: string
        default: 'newrelic/newrelic-java-agent'
      apm-source-ref:
        description: 'The source-ref of APM source code to use'
        required: true
        type: string
        default: 'k2-integration'
      run-unit-test:
        description: 'Run instrumentation unit tests ?'
        required: true
        type: string
        default: 'true'
      is-release:
        description: 'Is this a release run'
        required: true
        type: string
        default: 'false'
      version-suffix:
        description: 'version suffix to be added, if any'
        default: ''
        type: string

jobs:
  # this job reads the directories in csec-java-agent/instrumentation-security and creates a JSON with the list of the modules
  # this list is paginated and will be used in the verify-module job.
  build-agent:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout CSEC Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          apm-repo: ${{ inputs.apm-repo }}
          apm-branch: ${{ inputs.apm-source-ref }}
          apm-aws-access-key-id: ${{ secrets.APM_AWS_ACCESS_KEY_ID }}
          apm-aws-secret-access-key: ${{ secrets.APM_AWS_SECRET_ACCESS_KEY }}
          apm-aws-region: us-east-2

      - name: Check version compatibility
        shell: bash
        run: |
          APM_CONFIGURED_CSEC_VERSION=$(./gradlew ${GRADLE_OPTIONS} -p newrelic-java-agent/ properties | grep 'csecCollectorVersion:' | awk -F': ' '{print $2}')
          CSEC_CONFIGURED_APM_VERSION=$(./gradlew ${GRADLE_OPTIONS} properties | grep 'nrAPIVersion:' | awk -F': ' '{print $2}')

          if [[ "${APM_VERSION}" != "${CSEC_CONFIGURED_APM_VERSION}" ]]
          then
            printf "${RED}Version mismatch regarding APM: ${NONE}\n"
            printf "${RED}Version of APM to build: ${APM_VERSION} ${NONE}\n"
            printf "${RED}Version of APM API used by CSEC: ${CSEC_CONFIGURED_APM_VERSION} ${NONE}\n"
            exit 1
          fi

          if [[ "${SECURITY_VERSION}" != "${APM_CONFIGURED_CSEC_VERSION}" ]]
          then
            printf "${RED}Version mismatch regarding Security: ${NONE}\n"
            printf "${RED}Version of CSEC to build: ${SECURITY_VERSION} ${NONE}\n"
            printf "${RED}Version of CSEC API used by APM: ${APM_CONFIGURED_CSEC_VERSION} ${NONE}\n"
            exit 2
          fi

      - name: Publish CSEC to local
        uses: ./.github/actions/publish-csec-local

      - name: Run CSEC unit tests
        if: ${{ inputs.run-unit-test == 'true' }}
        uses: ./.github/actions/unit-test